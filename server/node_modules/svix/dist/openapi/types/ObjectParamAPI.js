"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectTransformationTemplateApi = exports.ObjectStreamApi = exports.ObjectStatisticsApi = exports.ObjectSinkApi = exports.ObjectMessageAttemptApi = exports.ObjectMessageApi = exports.ObjectIntegrationApi = exports.ObjectInboundApi = exports.ObjectHealthApi = exports.ObjectEventsApi = exports.ObjectEventTypeApi = exports.ObjectEnvironmentSettingsApi = exports.ObjectEnvironmentApi = exports.ObjectEndpointApi = exports.ObjectBroadcastApi = exports.ObjectBackgroundTasksApi = exports.ObjectAuthenticationApi = exports.ObjectApplicationApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    getAppUsageStatsApiV1AppStatsUsageGet(param, options) {
        return this.api.getAppUsageStatsApiV1AppStatsUsageGet(param.since, param.until, param.limit, param.iterator, options).toPromise();
    }
    v1ApplicationCreate(param, options) {
        return this.api.v1ApplicationCreate(param.applicationIn, param.getIfExists, param.idempotencyKey, options).toPromise();
    }
    v1ApplicationDelete(param, options) {
        return this.api.v1ApplicationDelete(param.appId, options).toPromise();
    }
    v1ApplicationGet(param, options) {
        return this.api.v1ApplicationGet(param.appId, options).toPromise();
    }
    v1ApplicationGetStats(param, options) {
        return this.api.v1ApplicationGetStats(param.since, param.until, param.appId, options).toPromise();
    }
    v1ApplicationList(param, options) {
        return this.api.v1ApplicationList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1ApplicationPatch(param, options) {
        return this.api.v1ApplicationPatch(param.appId, param.applicationPatch, options).toPromise();
    }
    v1ApplicationUpdate(param, options) {
        return this.api.v1ApplicationUpdate(param.appId, param.applicationIn, options).toPromise();
    }
}
exports.ObjectApplicationApi = ObjectApplicationApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    v1AuthenticationAppPortalAccess(param, options) {
        return this.api.v1AuthenticationAppPortalAccess(param.appId, param.appPortalAccessIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationCreateMessageToken(param, options) {
        return this.api.v1AuthenticationCreateMessageToken(param.appId, param.createMessageTokenIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationDashboardAccess(param, options) {
        return this.api.v1AuthenticationDashboardAccess(param.appId, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationExchangeOneTimeToken(param, options) {
        return this.api.v1AuthenticationExchangeOneTimeToken(param.oneTimeTokenIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationExpireAll(param, options) {
        return this.api.v1AuthenticationExpireAll(param.appId, param.applicationTokenExpireIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationLogout(param, options) {
        return this.api.v1AuthenticationLogout(param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectAuthenticationApi = ObjectAuthenticationApi;
const ObservableAPI_3 = require("./ObservableAPI");
class ObjectBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);
    }
    getBackgroundTask(param, options) {
        return this.api.getBackgroundTask(param.taskId, options).toPromise();
    }
    listBackgroundTasks(param, options) {
        return this.api.listBackgroundTasks(param.status, param.task, param.limit, param.iterator, param.order, options).toPromise();
    }
}
exports.ObjectBackgroundTasksApi = ObjectBackgroundTasksApi;
const ObservableAPI_4 = require("./ObservableAPI");
class ObjectBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableBroadcastApi(configuration, requestFactory, responseProcessor);
    }
    createBroadcastMessage(param, options) {
        return this.api.createBroadcastMessage(param.messageBroadcastIn, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectBroadcastApi = ObjectBroadcastApi;
const ObservableAPI_5 = require("./ObservableAPI");
class ObjectEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointCreate(param, options) {
        return this.api.v1EndpointCreate(param.appId, param.endpointIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointDelete(param, options) {
        return this.api.v1EndpointDelete(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointDeleteMtlsConfig(param, options) {
        return this.api.v1EndpointDeleteMtlsConfig(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointDeleteOauthConfig(param, options) {
        return this.api.v1EndpointDeleteOauthConfig(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGet(param, options) {
        return this.api.v1EndpointGet(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetHeaders(param, options) {
        return this.api.v1EndpointGetHeaders(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetSecret(param, options) {
        return this.api.v1EndpointGetSecret(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetStats(param, options) {
        return this.api.v1EndpointGetStats(param.appId, param.endpointId, param.since, param.until, options).toPromise();
    }
    v1EndpointList(param, options) {
        return this.api.v1EndpointList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
    v1EndpointPatch(param, options) {
        return this.api.v1EndpointPatch(param.appId, param.endpointId, param.endpointPatch, options).toPromise();
    }
    v1EndpointPatchHeaders(param, options) {
        return this.api.v1EndpointPatchHeaders(param.appId, param.endpointId, param.endpointHeadersPatchIn, options).toPromise();
    }
    v1EndpointRecover(param, options) {
        return this.api.v1EndpointRecover(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointReplay(param, options) {
        return this.api.v1EndpointReplay(param.appId, param.endpointId, param.replayIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointRotateSecret(param, options) {
        return this.api.v1EndpointRotateSecret(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointSendExample(param, options) {
        return this.api.v1EndpointSendExample(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointTransformationGet(param, options) {
        return this.api.v1EndpointTransformationGet(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointTransformationPartialUpdate(param, options) {
        return this.api.v1EndpointTransformationPartialUpdate(param.appId, param.endpointId, param.endpointTransformationIn, options).toPromise();
    }
    v1EndpointTransformationSimulate(param, options) {
        return this.api.v1EndpointTransformationSimulate(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointUpdate(param, options) {
        return this.api.v1EndpointUpdate(param.appId, param.endpointId, param.endpointUpdate, options).toPromise();
    }
    v1EndpointUpdateHeaders(param, options) {
        return this.api.v1EndpointUpdateHeaders(param.appId, param.endpointId, param.endpointHeadersIn, options).toPromise();
    }
    v1EndpointUpdateMtlsConfig(param, options) {
        return this.api.v1EndpointUpdateMtlsConfig(param.appId, param.endpointId, param.endpointMtlsConfigIn, options).toPromise();
    }
    v1EndpointUpdateOauthConfig(param, options) {
        return this.api.v1EndpointUpdateOauthConfig(param.appId, param.endpointId, param.endpointOauthConfigIn, options).toPromise();
    }
    v1SinkCreate(param, options) {
        return this.api.v1SinkCreate(param.appId, param.sinkIn, param.idempotencyKey, options).toPromise();
    }
    v1SinkGet(param, options) {
        return this.api.v1SinkGet(param.appId, param.sinkId, options).toPromise();
    }
    v1SinkList(param, options) {
        return this.api.v1SinkList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
}
exports.ObjectEndpointApi = ObjectEndpointApi;
const ObservableAPI_6 = require("./ObservableAPI");
class ObjectEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentExport(param, options) {
        return this.api.v1EnvironmentExport(param.idempotencyKey, options).toPromise();
    }
    v1EnvironmentExportGet(param, options) {
        return this.api.v1EnvironmentExportGet(options).toPromise();
    }
    v1EnvironmentImport(param, options) {
        return this.api.v1EnvironmentImport(param.environmentIn, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectEnvironmentApi = ObjectEnvironmentApi;
const ObservableAPI_7 = require("./ObservableAPI");
class ObjectEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentGetSettings(param, options) {
        return this.api.v1EnvironmentGetSettings(options).toPromise();
    }
}
exports.ObjectEnvironmentSettingsApi = ObjectEnvironmentSettingsApi;
const ObservableAPI_8 = require("./ObservableAPI");
class ObjectEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_8.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    v1EventTypeCreate(param, options) {
        return this.api.v1EventTypeCreate(param.eventTypeIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeDelete(param, options) {
        return this.api.v1EventTypeDelete(param.eventTypeName, param.expunge, options).toPromise();
    }
    v1EventTypeExportOpenapi(param, options) {
        return this.api.v1EventTypeExportOpenapi(param.idempotencyKey, options).toPromise();
    }
    v1EventTypeGenerateExample(param, options) {
        return this.api.v1EventTypeGenerateExample(param.eventTypeSchemaIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeGet(param, options) {
        return this.api.v1EventTypeGet(param.eventTypeName, options).toPromise();
    }
    v1EventTypeGetRetrySchedule(param, options) {
        return this.api.v1EventTypeGetRetrySchedule(param.eventTypeName, options).toPromise();
    }
    v1EventTypeImportOpenapi(param, options) {
        return this.api.v1EventTypeImportOpenapi(param.eventTypeImportOpenApiIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeList(param, options) {
        return this.api.v1EventTypeList(param.limit, param.iterator, param.order, param.includeArchived, param.withContent, options).toPromise();
    }
    v1EventTypePatch(param, options) {
        return this.api.v1EventTypePatch(param.eventTypeName, param.eventTypePatch, options).toPromise();
    }
    v1EventTypeUpdate(param, options) {
        return this.api.v1EventTypeUpdate(param.eventTypeName, param.eventTypeUpdate, options).toPromise();
    }
    v1EventTypeUpdateRetrySchedule(param, options) {
        return this.api.v1EventTypeUpdateRetrySchedule(param.eventTypeName, param.retryScheduleInOut, options).toPromise();
    }
}
exports.ObjectEventTypeApi = ObjectEventTypeApi;
const ObservableAPI_9 = require("./ObservableAPI");
class ObjectEventsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_9.ObservableEventsApi(configuration, requestFactory, responseProcessor);
    }
    v1Events(param, options) {
        return this.api.v1Events(param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
}
exports.ObjectEventsApi = ObjectEventsApi;
const ObservableAPI_10 = require("./ObservableAPI");
class ObjectHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_10.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    v1HealthGet(param, options) {
        return this.api.v1HealthGet(options).toPromise();
    }
}
exports.ObjectHealthApi = ObjectHealthApi;
const ObservableAPI_11 = require("./ObservableAPI");
class ObjectInboundApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_11.ObservableInboundApi(configuration, requestFactory, responseProcessor);
    }
    v1InboundMsg(param, options) {
        return this.api.v1InboundMsg(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey, options).toPromise();
    }
    v1InboundRotateUrl(param, options) {
        return this.api.v1InboundRotateUrl(param.appId, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectInboundApi = ObjectInboundApi;
const ObservableAPI_12 = require("./ObservableAPI");
class ObjectIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_12.ObservableIntegrationApi(configuration, requestFactory, responseProcessor);
    }
    v1IntegrationCreate(param, options) {
        return this.api.v1IntegrationCreate(param.appId, param.integrationIn, param.idempotencyKey, options).toPromise();
    }
    v1IntegrationDelete(param, options) {
        return this.api.v1IntegrationDelete(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationGet(param, options) {
        return this.api.v1IntegrationGet(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationGetKey(param, options) {
        return this.api.v1IntegrationGetKey(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationList(param, options) {
        return this.api.v1IntegrationList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
    v1IntegrationRotateKey(param, options) {
        return this.api.v1IntegrationRotateKey(param.appId, param.integId, param.idempotencyKey, options).toPromise();
    }
    v1IntegrationUpdate(param, options) {
        return this.api.v1IntegrationUpdate(param.appId, param.integId, param.integrationUpdate, options).toPromise();
    }
}
exports.ObjectIntegrationApi = ObjectIntegrationApi;
const ObservableAPI_13 = require("./ObservableAPI");
class ObjectMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_13.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageAttemptForEndpoint(param, options) {
        return this.api.createMessageAttemptForEndpoint(param.appId, param.endpointId, param.messageIn, param.idempotencyKey, options).toPromise();
    }
    v1MessageCreate(param, options) {
        return this.api.v1MessageCreate(param.appId, param.messageIn, param.withContent, param.idempotencyKey, options).toPromise();
    }
    v1MessageEvents(param, options) {
        return this.api.v1MessageEvents(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
    v1MessageEventsSubscription(param, options) {
        return this.api.v1MessageEventsSubscription(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
    v1MessageEventsSubscriptionCreateToken(param, options) {
        return this.api.v1MessageEventsSubscriptionCreateToken(param.appId, param.subscriptionId, param.idempotencyKey, options).toPromise();
    }
    v1MessageExpungeContent(param, options) {
        return this.api.v1MessageExpungeContent(param.appId, param.msgId, options).toPromise();
    }
    v1MessageGet(param, options) {
        return this.api.v1MessageGet(param.appId, param.msgId, param.withContent, options).toPromise();
    }
    v1MessageGetRawPayload(param, options) {
        return this.api.v1MessageGetRawPayload(param.appId, param.msgId, options).toPromise();
    }
    v1MessageList(param, options) {
        return this.api.v1MessageList(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes, options).toPromise();
    }
}
exports.ObjectMessageApi = ObjectMessageApi;
const ObservableAPI_14 = require("./ObservableAPI");
class ObjectMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_14.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    v1MessageAttemptExpungeContent(param, options) {
        return this.api.v1MessageAttemptExpungeContent(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptGet(param, options) {
        return this.api.v1MessageAttemptGet(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptGetHeaders(param, options) {
        return this.api.v1MessageAttemptGetHeaders(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptListAttemptedDestinations(param, options) {
        return this.api.v1MessageAttemptListAttemptedDestinations(param.appId, param.msgId, param.limit, param.iterator, options).toPromise();
    }
    v1MessageAttemptListAttemptedMessages(param, options) {
        return this.api.v1MessageAttemptListAttemptedMessages(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByEndpoint(param, options) {
        return this.api.v1MessageAttemptListByEndpoint(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByEndpointDeprecated(param, options) {
        return this.api.v1MessageAttemptListByEndpointDeprecated(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByMsg(param, options) {
        return this.api.v1MessageAttemptListByMsg(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByMsgDeprecated(param, options) {
        return this.api.v1MessageAttemptListByMsgDeprecated(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptResend(param, options) {
        return this.api.v1MessageAttemptResend(param.appId, param.msgId, param.endpointId, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectMessageAttemptApi = ObjectMessageAttemptApi;
const ObservableAPI_15 = require("./ObservableAPI");
class ObjectSinkApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_15.ObservableSinkApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamCreateEvents(param, options) {
        return this.api.v1StreamCreateEvents(param.streamId, param.createStreamIn, param.idempotencyKey, options).toPromise();
    }
    v1StreamEventsGet(param, options) {
        return this.api.v1StreamEventsGet(param.streamId, param.limit, param.iterator, param.after, options).toPromise();
    }
}
exports.ObjectSinkApi = ObjectSinkApi;
const ObservableAPI_16 = require("./ObservableAPI");
class ObjectStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_16.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    v1StatisticsAggregateAppStats(param, options) {
        return this.api.v1StatisticsAggregateAppStats(param.appUsageStatsIn, param.idempotencyKey, options).toPromise();
    }
    v1StatisticsAggregateEventTypes(param, options) {
        return this.api.v1StatisticsAggregateEventTypes(options).toPromise();
    }
    v1StatsAppAttempts(param, options) {
        return this.api.v1StatsAppAttempts(param.appId, param.startDate, param.endDate, options).toPromise();
    }
    v1StatsEndpointAttempts(param, options) {
        return this.api.v1StatsEndpointAttempts(param.appId, param.endpointId, param.startDate, param.endDate, options).toPromise();
    }
}
exports.ObjectStatisticsApi = ObjectStatisticsApi;
const ObservableAPI_17 = require("./ObservableAPI");
class ObjectStreamApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_17.ObservableStreamApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamCreate(param, options) {
        return this.api.v1StreamCreate(param.streamIn, param.idempotencyKey, options).toPromise();
    }
    v1StreamDelete(param, options) {
        return this.api.v1StreamDelete(param.streamId, options).toPromise();
    }
    v1StreamGet(param, options) {
        return this.api.v1StreamGet(param.streamId, options).toPromise();
    }
    v1StreamList(param, options) {
        return this.api.v1StreamList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1StreamPatch(param, options) {
        return this.api.v1StreamPatch(param.streamId, param.streamPatch, options).toPromise();
    }
    v1StreamUpdate(param, options) {
        return this.api.v1StreamUpdate(param.streamId, param.streamIn, options).toPromise();
    }
}
exports.ObjectStreamApi = ObjectStreamApi;
const ObservableAPI_18 = require("./ObservableAPI");
class ObjectTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_18.ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointUpdateHubspotOauthConfig(param, options) {
        return this.api.v1EndpointUpdateHubspotOauthConfig(param.appId, param.endpointId, param.hubspotOauthConfigIn, options).toPromise();
    }
    v1TransformationTemplateCreate(param, options) {
        return this.api.v1TransformationTemplateCreate(param.templateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateDelete(param, options) {
        return this.api.v1TransformationTemplateDelete(param.transformationTemplateId, options).toPromise();
    }
    v1TransformationTemplateGenerate(param, options) {
        return this.api.v1TransformationTemplateGenerate(param.generateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateGet(param, options) {
        return this.api.v1TransformationTemplateGet(param.transformationTemplateId, options).toPromise();
    }
    v1TransformationTemplateList(param, options) {
        return this.api.v1TransformationTemplateList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1TransformationTemplateOauthDiscord(param, options) {
        return this.api.v1TransformationTemplateOauthDiscord(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateOauthHubspot(param, options) {
        return this.api.v1TransformationTemplateOauthHubspot(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateOauthSlack(param, options) {
        return this.api.v1TransformationTemplateOauthSlack(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplatePatch(param, options) {
        return this.api.v1TransformationTemplatePatch(param.transformationTemplateId, param.templatePatch, options).toPromise();
    }
    v1TransformationTemplateSimulate(param, options) {
        return this.api.v1TransformationTemplateSimulate(param.transformationSimulateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateUpdate(param, options) {
        return this.api.v1TransformationTemplateUpdate(param.transformationTemplateId, param.templateUpdate, options).toPromise();
    }
}
exports.ObjectTransformationTemplateApi = ObjectTransformationTemplateApi;
//# sourceMappingURL=ObjectParamAPI.js.map