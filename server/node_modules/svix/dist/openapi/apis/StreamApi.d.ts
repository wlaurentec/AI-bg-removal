import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ListResponseStreamOut } from '../models/ListResponseStreamOut';
import { Ordering } from '../models/Ordering';
import { StreamIn } from '../models/StreamIn';
import { StreamOut } from '../models/StreamOut';
import { StreamPatch } from '../models/StreamPatch';
export declare class StreamApiRequestFactory extends BaseAPIRequestFactory {
    v1StreamCreate(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1StreamDelete(streamId: string, _options?: Configuration): Promise<RequestContext>;
    v1StreamGet(streamId: string, _options?: Configuration): Promise<RequestContext>;
    v1StreamList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1StreamPatch(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Promise<RequestContext>;
    v1StreamUpdate(streamId: string, streamIn: StreamIn, _options?: Configuration): Promise<RequestContext>;
}
export declare class StreamApiResponseProcessor {
    v1StreamCreate(response: ResponseContext): Promise<StreamOut>;
    v1StreamDelete(response: ResponseContext): Promise<void>;
    v1StreamGet(response: ResponseContext): Promise<StreamOut>;
    v1StreamList(response: ResponseContext): Promise<ListResponseStreamOut>;
    v1StreamPatch(response: ResponseContext): Promise<StreamOut>;
    v1StreamUpdate(response: ResponseContext): Promise<StreamOut>;
}
