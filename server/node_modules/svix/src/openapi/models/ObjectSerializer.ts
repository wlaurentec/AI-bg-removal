export * from './AggregateEventTypesOut';
export * from './AppPortalAccessIn';
export * from './AppPortalAccessOut';
export * from './AppUsageStatsIn';
export * from './AppUsageStatsOut';
export * from './ApplicationIn';
export * from './ApplicationOut';
export * from './ApplicationPatch';
export * from './ApplicationStats';
export * from './ApplicationTokenExpireIn';
export * from './AttemptStatisticsData';
export * from './AttemptStatisticsResponse';
export * from './AuthTokenOut';
export * from './AzureBlobStorageConfig';
export * from './BackgroundTaskOut';
export * from './BackgroundTaskStatus';
export * from './BackgroundTaskType';
export * from './BorderRadiusConfig';
export * from './BorderRadiusEnum';
export * from './ClientSecretJwtParamsIn';
export * from './CompletionChoice';
export * from './CompletionMessage';
export * from './CreateMessageTokenIn';
export * from './CreateStreamIn';
export * from './CustomColorPalette';
export * from './CustomStringsOverride';
export * from './CustomThemeOverride';
export * from './DashboardAccessOut';
export * from './Duration';
export * from './EndpointCreatedEvent';
export * from './EndpointCreatedEventData';
export * from './EndpointDeletedEvent';
export * from './EndpointDeletedEventData';
export * from './EndpointDisabledEvent';
export * from './EndpointDisabledEventData';
export * from './EndpointHeadersIn';
export * from './EndpointHeadersOut';
export * from './EndpointHeadersPatchIn';
export * from './EndpointIn';
export * from './EndpointMessageOut';
export * from './EndpointMtlsConfigIn';
export * from './EndpointOauthConfigIn';
export * from './EndpointOut';
export * from './EndpointPatch';
export * from './EndpointSecretOut';
export * from './EndpointSecretRotateIn';
export * from './EndpointStats';
export * from './EndpointTransformationIn';
export * from './EndpointTransformationOut';
export * from './EndpointTransformationSimulateIn';
export * from './EndpointTransformationSimulateOut';
export * from './EndpointUpdate';
export * from './EndpointUpdatedEvent';
export * from './EndpointUpdatedEventData';
export * from './EnvironmentIn';
export * from './EnvironmentOut';
export * from './EnvironmentSettingsOut';
export * from './EventExampleIn';
export * from './EventIn';
export * from './EventOut';
export * from './EventStreamOut';
export * from './EventTypeExampleOut';
export * from './EventTypeFromOpenApi';
export * from './EventTypeImportOpenApiIn';
export * from './EventTypeImportOpenApiOut';
export * from './EventTypeImportOpenApiOutData';
export * from './EventTypeIn';
export * from './EventTypeOut';
export * from './EventTypePatch';
export * from './EventTypeSchemaIn';
export * from './EventTypeUpdate';
export * from './ExportEventTypeOut';
export * from './FontSizeConfig';
export * from './GenerateIn';
export * from './GenerateOut';
export * from './GoogleCloudStorageConfig';
export * from './HTTPValidationError';
export * from './HttpErrorOut';
export * from './HubspotOauthConfigIn';
export * from './InboundPathParams';
export * from './IncomingWebhookPayloadOut';
export * from './IntegrationIn';
export * from './IntegrationKeyOut';
export * from './IntegrationOut';
export * from './IntegrationUpdate';
export * from './KafkaSecurityProtocolType';
export * from './ListResponseApplicationOut';
export * from './ListResponseApplicationStats';
export * from './ListResponseBackgroundTaskOut';
export * from './ListResponseEndpointMessageOut';
export * from './ListResponseEndpointOut';
export * from './ListResponseEventTypeOut';
export * from './ListResponseIntegrationOut';
export * from './ListResponseMessageAttemptEndpointOut';
export * from './ListResponseMessageAttemptOut';
export * from './ListResponseMessageEndpointOut';
export * from './ListResponseMessageOut';
export * from './ListResponseSinkOut';
export * from './ListResponseStreamOut';
export * from './ListResponseStreamSinkOut';
export * from './ListResponseTemplateOut';
export * from './MessageAttemptEndpointOut';
export * from './MessageAttemptExhaustedEvent';
export * from './MessageAttemptExhaustedEventData';
export * from './MessageAttemptFailedData';
export * from './MessageAttemptFailingEvent';
export * from './MessageAttemptFailingEventData';
export * from './MessageAttemptHeadersOut';
export * from './MessageAttemptOut';
export * from './MessageAttemptRecoveredEvent';
export * from './MessageAttemptRecoveredEventData';
export * from './MessageAttemptTriggerType';
export * from './MessageBroadcastIn';
export * from './MessageBroadcastOut';
export * from './MessageEndpointOut';
export * from './MessageEventsOut';
export * from './MessageIn';
export * from './MessageOut';
export * from './MessageRawPayloadOut';
export * from './MessageStatus';
export * from './MessageSubscriberAuthTokenOut';
export * from './OAuthPayloadIn';
export * from './OAuthPayloadOut';
export * from './Oauth2AuthMethodIn';
export * from './Oauth2GrantTypeIn';
export * from './OauthJwsSigningAlgorithm';
export * from './OneTimeTokenIn';
export * from './OneTimeTokenOut';
export * from './Ordering';
export * from './RecoverIn';
export * from './RecoverOut';
export * from './RedshiftConfig';
export * from './ReplayIn';
export * from './ReplayOut';
export * from './RetryScheduleInOut';
export * from './RotatedUrlOut';
export * from './S3Config';
export * from './SettingsIn';
export * from './SettingsOut';
export * from './SinkHttpConfig';
export * from './SinkIn';
export * from './SinkInOneOf';
export * from './SinkInOneOf1';
export * from './SinkInOneOf2';
export * from './SinkInOneOf3';
export * from './SinkOtelV1Config';
export * from './SinkOut';
export * from './SinkPayloadFormat';
export * from './SinkStatus';
export * from './SinkStatusIn';
export * from './SinkTransformIn';
export * from './SinkTransformationOut';
export * from './SnowflakeConfig';
export * from './StatisticsPeriod';
export * from './StatusCodeClass';
export * from './StreamIn';
export * from './StreamOut';
export * from './StreamPatch';
export * from './StreamSinkIn';
export * from './StreamSinkInOneOf';
export * from './StreamSinkInOneOf1';
export * from './StreamSinkInOneOf2';
export * from './StreamSinkInOneOf3';
export * from './StreamSinkInOneOf4';
export * from './StreamSinkInOneOf5';
export * from './StreamSinkInOneOf6';
export * from './StreamSinkOut';
export * from './StreamSinkPatch';
export * from './TemplateIn';
export * from './TemplateOut';
export * from './TemplatePatch';
export * from './TemplateUpdate';
export * from './TransformationHttpMethod';
export * from './TransformationSimulateIn';
export * from './TransformationSimulateOut';
export * from './TransformationTemplateKind';
export * from './ValidationError';

import { AggregateEventTypesOut } from './AggregateEventTypesOut';
import { AppPortalAccessIn } from './AppPortalAccessIn';
import { AppPortalAccessOut } from './AppPortalAccessOut';
import { AppUsageStatsIn } from './AppUsageStatsIn';
import { AppUsageStatsOut } from './AppUsageStatsOut';
import { ApplicationIn } from './ApplicationIn';
import { ApplicationOut } from './ApplicationOut';
import { ApplicationPatch } from './ApplicationPatch';
import { ApplicationStats } from './ApplicationStats';
import { ApplicationTokenExpireIn } from './ApplicationTokenExpireIn';
import { AttemptStatisticsData } from './AttemptStatisticsData';
import { AttemptStatisticsResponse } from './AttemptStatisticsResponse';
import { AuthTokenOut } from './AuthTokenOut';
import { AzureBlobStorageConfig } from './AzureBlobStorageConfig';
import { BackgroundTaskOut } from './BackgroundTaskOut';
import { BackgroundTaskStatus } from './BackgroundTaskStatus';
import { BackgroundTaskType } from './BackgroundTaskType';
import { BorderRadiusConfig } from './BorderRadiusConfig';
import { BorderRadiusEnum } from './BorderRadiusEnum';
import { ClientSecretJwtParamsIn } from './ClientSecretJwtParamsIn';
import { CompletionChoice } from './CompletionChoice';
import { CompletionMessage } from './CompletionMessage';
import { CreateMessageTokenIn } from './CreateMessageTokenIn';
import { CreateStreamIn } from './CreateStreamIn';
import { CustomColorPalette } from './CustomColorPalette';
import { CustomStringsOverride } from './CustomStringsOverride';
import { CustomThemeOverride } from './CustomThemeOverride';
import { DashboardAccessOut } from './DashboardAccessOut';
import { Duration } from './Duration';
import { EndpointCreatedEvent , EndpointCreatedEventTypeEnum   } from './EndpointCreatedEvent';
import { EndpointCreatedEventData } from './EndpointCreatedEventData';
import { EndpointDeletedEvent , EndpointDeletedEventTypeEnum   } from './EndpointDeletedEvent';
import { EndpointDeletedEventData } from './EndpointDeletedEventData';
import { EndpointDisabledEvent , EndpointDisabledEventTypeEnum   } from './EndpointDisabledEvent';
import { EndpointDisabledEventData } from './EndpointDisabledEventData';
import { EndpointHeadersIn } from './EndpointHeadersIn';
import { EndpointHeadersOut } from './EndpointHeadersOut';
import { EndpointHeadersPatchIn } from './EndpointHeadersPatchIn';
import { EndpointIn } from './EndpointIn';
import { EndpointMessageOut } from './EndpointMessageOut';
import { EndpointMtlsConfigIn } from './EndpointMtlsConfigIn';
import { EndpointOauthConfigIn } from './EndpointOauthConfigIn';
import { EndpointOut } from './EndpointOut';
import { EndpointPatch } from './EndpointPatch';
import { EndpointSecretOut } from './EndpointSecretOut';
import { EndpointSecretRotateIn } from './EndpointSecretRotateIn';
import { EndpointStats } from './EndpointStats';
import { EndpointTransformationIn } from './EndpointTransformationIn';
import { EndpointTransformationOut } from './EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from './EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from './EndpointTransformationSimulateOut';
import { EndpointUpdate } from './EndpointUpdate';
import { EndpointUpdatedEvent , EndpointUpdatedEventTypeEnum   } from './EndpointUpdatedEvent';
import { EndpointUpdatedEventData } from './EndpointUpdatedEventData';
import { EnvironmentIn } from './EnvironmentIn';
import { EnvironmentOut } from './EnvironmentOut';
import { EnvironmentSettingsOut } from './EnvironmentSettingsOut';
import { EventExampleIn } from './EventExampleIn';
import { EventIn } from './EventIn';
import { EventOut } from './EventOut';
import { EventStreamOut } from './EventStreamOut';
import { EventTypeExampleOut } from './EventTypeExampleOut';
import { EventTypeFromOpenApi } from './EventTypeFromOpenApi';
import { EventTypeImportOpenApiIn } from './EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from './EventTypeImportOpenApiOut';
import { EventTypeImportOpenApiOutData } from './EventTypeImportOpenApiOutData';
import { EventTypeIn } from './EventTypeIn';
import { EventTypeOut } from './EventTypeOut';
import { EventTypePatch } from './EventTypePatch';
import { EventTypeSchemaIn } from './EventTypeSchemaIn';
import { EventTypeUpdate } from './EventTypeUpdate';
import { ExportEventTypeOut } from './ExportEventTypeOut';
import { FontSizeConfig } from './FontSizeConfig';
import { GenerateIn } from './GenerateIn';
import { GenerateOut } from './GenerateOut';
import { GoogleCloudStorageConfig } from './GoogleCloudStorageConfig';
import { HTTPValidationError } from './HTTPValidationError';
import { HttpErrorOut } from './HttpErrorOut';
import { HubspotOauthConfigIn } from './HubspotOauthConfigIn';
import { InboundPathParams } from './InboundPathParams';
import { IncomingWebhookPayloadOut } from './IncomingWebhookPayloadOut';
import { IntegrationIn } from './IntegrationIn';
import { IntegrationKeyOut } from './IntegrationKeyOut';
import { IntegrationOut } from './IntegrationOut';
import { IntegrationUpdate } from './IntegrationUpdate';
import { KafkaSecurityProtocolType } from './KafkaSecurityProtocolType';
import { ListResponseApplicationOut } from './ListResponseApplicationOut';
import { ListResponseApplicationStats } from './ListResponseApplicationStats';
import { ListResponseBackgroundTaskOut } from './ListResponseBackgroundTaskOut';
import { ListResponseEndpointMessageOut } from './ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from './ListResponseEndpointOut';
import { ListResponseEventTypeOut } from './ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from './ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from './ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from './ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from './ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from './ListResponseMessageOut';
import { ListResponseSinkOut } from './ListResponseSinkOut';
import { ListResponseStreamOut } from './ListResponseStreamOut';
import { ListResponseStreamSinkOut } from './ListResponseStreamSinkOut';
import { ListResponseTemplateOut } from './ListResponseTemplateOut';
import { MessageAttemptEndpointOut } from './MessageAttemptEndpointOut';
import { MessageAttemptExhaustedEvent , MessageAttemptExhaustedEventTypeEnum   } from './MessageAttemptExhaustedEvent';
import { MessageAttemptExhaustedEventData } from './MessageAttemptExhaustedEventData';
import { MessageAttemptFailedData } from './MessageAttemptFailedData';
import { MessageAttemptFailingEvent , MessageAttemptFailingEventTypeEnum   } from './MessageAttemptFailingEvent';
import { MessageAttemptFailingEventData } from './MessageAttemptFailingEventData';
import { MessageAttemptHeadersOut } from './MessageAttemptHeadersOut';
import { MessageAttemptOut } from './MessageAttemptOut';
import { MessageAttemptRecoveredEvent , MessageAttemptRecoveredEventTypeEnum   } from './MessageAttemptRecoveredEvent';
import { MessageAttemptRecoveredEventData } from './MessageAttemptRecoveredEventData';
import { MessageAttemptTriggerType } from './MessageAttemptTriggerType';
import { MessageBroadcastIn } from './MessageBroadcastIn';
import { MessageBroadcastOut } from './MessageBroadcastOut';
import { MessageEndpointOut } from './MessageEndpointOut';
import { MessageEventsOut } from './MessageEventsOut';
import { MessageIn } from './MessageIn';
import { MessageOut } from './MessageOut';
import { MessageRawPayloadOut } from './MessageRawPayloadOut';
import { MessageStatus } from './MessageStatus';
import { MessageSubscriberAuthTokenOut } from './MessageSubscriberAuthTokenOut';
import { OAuthPayloadIn } from './OAuthPayloadIn';
import { OAuthPayloadOut } from './OAuthPayloadOut';
import { Oauth2AuthMethodIn } from './Oauth2AuthMethodIn';
import { Oauth2GrantTypeIn } from './Oauth2GrantTypeIn';
import { OauthJwsSigningAlgorithm } from './OauthJwsSigningAlgorithm';
import { OneTimeTokenIn } from './OneTimeTokenIn';
import { OneTimeTokenOut } from './OneTimeTokenOut';
import { Ordering } from './Ordering';
import { RecoverIn } from './RecoverIn';
import { RecoverOut } from './RecoverOut';
import { RedshiftConfig } from './RedshiftConfig';
import { ReplayIn } from './ReplayIn';
import { ReplayOut } from './ReplayOut';
import { RetryScheduleInOut } from './RetryScheduleInOut';
import { RotatedUrlOut } from './RotatedUrlOut';
import { S3Config } from './S3Config';
import { SettingsIn } from './SettingsIn';
import { SettingsOut } from './SettingsOut';
import { SinkHttpConfig } from './SinkHttpConfig';
import { SinkIn         , SinkInTypeEnum              } from './SinkIn';
import { SinkInOneOf , SinkInOneOfTypeEnum    } from './SinkInOneOf';
import { SinkInOneOf1    , SinkInOneOf1TypeEnum   } from './SinkInOneOf1';
import { SinkInOneOf2     , SinkInOneOf2TypeEnum   } from './SinkInOneOf2';
import { SinkInOneOf3, SinkInOneOf3TypeEnum    } from './SinkInOneOf3';
import { SinkOtelV1Config } from './SinkOtelV1Config';
import { SinkOut           , SinkOutTypeEnum              } from './SinkOut';
import { SinkPayloadFormat } from './SinkPayloadFormat';
import { SinkStatus } from './SinkStatus';
import { SinkStatusIn } from './SinkStatusIn';
import { SinkTransformIn } from './SinkTransformIn';
import { SinkTransformationOut } from './SinkTransformationOut';
import { SnowflakeConfig } from './SnowflakeConfig';
import { StatisticsPeriod } from './StatisticsPeriod';
import { StatusCodeClass } from './StatusCodeClass';
import { StreamIn } from './StreamIn';
import { StreamOut } from './StreamOut';
import { StreamPatch } from './StreamPatch';
import { StreamSinkIn      , StreamSinkInTypeEnum   } from './StreamSinkIn';
import { StreamSinkInOneOf , StreamSinkInOneOfTypeEnum   } from './StreamSinkInOneOf';
import { StreamSinkInOneOf1 , StreamSinkInOneOf1TypeEnum   } from './StreamSinkInOneOf1';
import { StreamSinkInOneOf2 , StreamSinkInOneOf2TypeEnum   } from './StreamSinkInOneOf2';
import { StreamSinkInOneOf3 , StreamSinkInOneOf3TypeEnum   } from './StreamSinkInOneOf3';
import { StreamSinkInOneOf4 , StreamSinkInOneOf4TypeEnum   } from './StreamSinkInOneOf4';
import { StreamSinkInOneOf5 , StreamSinkInOneOf5TypeEnum   } from './StreamSinkInOneOf5';
import { StreamSinkInOneOf6 , StreamSinkInOneOf6TypeEnum   } from './StreamSinkInOneOf6';
import { StreamSinkOut           , StreamSinkOutTypeEnum   } from './StreamSinkOut';
import { StreamSinkPatch      , StreamSinkPatchTypeEnum   } from './StreamSinkPatch';
import { TemplateIn } from './TemplateIn';
import { TemplateOut } from './TemplateOut';
import { TemplatePatch } from './TemplatePatch';
import { TemplateUpdate } from './TemplateUpdate';
import { TransformationHttpMethod } from './TransformationHttpMethod';
import { TransformationSimulateIn } from './TransformationSimulateIn';
import { TransformationSimulateOut } from './TransformationSimulateOut';
import { TransformationTemplateKind } from './TransformationTemplateKind';
import { ValidationError } from './ValidationError';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

const supportedMediaTypes: { [mediaType: string]: number } = {
  "application/json": Infinity,
  "application/octet-stream": 0
}

                 
let enumsMap: Set<string> = new Set<string>([
    "BackgroundTaskStatus",
    "BackgroundTaskType",
    "BorderRadiusEnum",
    "EndpointCreatedEventTypeEnum",
    "EndpointDeletedEventTypeEnum",
    "EndpointDisabledEventTypeEnum",
    "EndpointUpdatedEventTypeEnum",
    "KafkaSecurityProtocolType",
    "MessageAttemptExhaustedEventTypeEnum",
    "MessageAttemptFailingEventTypeEnum",
    "MessageAttemptRecoveredEventTypeEnum",
    "MessageAttemptTriggerType",
    "MessageStatus",
    "Oauth2AuthMethodIn",
    "Oauth2GrantTypeIn",
    "OauthJwsSigningAlgorithm",
    "Ordering",
    "SinkInTypeEnum",
    "SinkInOneOfTypeEnum",
    "SinkInOneOf1TypeEnum",
    "SinkInOneOf2TypeEnum",
    "SinkInOneOf3TypeEnum",
    "SinkOutTypeEnum",
    "SinkPayloadFormat",
    "SinkStatus",
    "SinkStatusIn",
    "StatisticsPeriod",
    "StatusCodeClass",
    "StreamSinkInTypeEnum",
    "StreamSinkInOneOfTypeEnum",
    "StreamSinkInOneOf1TypeEnum",
    "StreamSinkInOneOf2TypeEnum",
    "StreamSinkInOneOf3TypeEnum",
    "StreamSinkInOneOf4TypeEnum",
    "StreamSinkInOneOf5TypeEnum",
    "StreamSinkInOneOf6TypeEnum",
    "StreamSinkOutTypeEnum",
    "StreamSinkPatchTypeEnum",
    "TransformationHttpMethod",
    "TransformationTemplateKind",
]);

let typeMap: {[index: string]: any} = {
    "AggregateEventTypesOut": AggregateEventTypesOut,
    "AppPortalAccessIn": AppPortalAccessIn,
    "AppPortalAccessOut": AppPortalAccessOut,
    "AppUsageStatsIn": AppUsageStatsIn,
    "AppUsageStatsOut": AppUsageStatsOut,
    "ApplicationIn": ApplicationIn,
    "ApplicationOut": ApplicationOut,
    "ApplicationPatch": ApplicationPatch,
    "ApplicationStats": ApplicationStats,
    "ApplicationTokenExpireIn": ApplicationTokenExpireIn,
    "AttemptStatisticsData": AttemptStatisticsData,
    "AttemptStatisticsResponse": AttemptStatisticsResponse,
    "AuthTokenOut": AuthTokenOut,
    "AzureBlobStorageConfig": AzureBlobStorageConfig,
    "BackgroundTaskOut": BackgroundTaskOut,
    "BorderRadiusConfig": BorderRadiusConfig,
    "ClientSecretJwtParamsIn": ClientSecretJwtParamsIn,
    "CompletionChoice": CompletionChoice,
    "CompletionMessage": CompletionMessage,
    "CreateMessageTokenIn": CreateMessageTokenIn,
    "CreateStreamIn": CreateStreamIn,
    "CustomColorPalette": CustomColorPalette,
    "CustomStringsOverride": CustomStringsOverride,
    "CustomThemeOverride": CustomThemeOverride,
    "DashboardAccessOut": DashboardAccessOut,
    "Duration": Duration,
    "EndpointCreatedEvent": EndpointCreatedEvent,
    "EndpointCreatedEventData": EndpointCreatedEventData,
    "EndpointDeletedEvent": EndpointDeletedEvent,
    "EndpointDeletedEventData": EndpointDeletedEventData,
    "EndpointDisabledEvent": EndpointDisabledEvent,
    "EndpointDisabledEventData": EndpointDisabledEventData,
    "EndpointHeadersIn": EndpointHeadersIn,
    "EndpointHeadersOut": EndpointHeadersOut,
    "EndpointHeadersPatchIn": EndpointHeadersPatchIn,
    "EndpointIn": EndpointIn,
    "EndpointMessageOut": EndpointMessageOut,
    "EndpointMtlsConfigIn": EndpointMtlsConfigIn,
    "EndpointOauthConfigIn": EndpointOauthConfigIn,
    "EndpointOut": EndpointOut,
    "EndpointPatch": EndpointPatch,
    "EndpointSecretOut": EndpointSecretOut,
    "EndpointSecretRotateIn": EndpointSecretRotateIn,
    "EndpointStats": EndpointStats,
    "EndpointTransformationIn": EndpointTransformationIn,
    "EndpointTransformationOut": EndpointTransformationOut,
    "EndpointTransformationSimulateIn": EndpointTransformationSimulateIn,
    "EndpointTransformationSimulateOut": EndpointTransformationSimulateOut,
    "EndpointUpdate": EndpointUpdate,
    "EndpointUpdatedEvent": EndpointUpdatedEvent,
    "EndpointUpdatedEventData": EndpointUpdatedEventData,
    "EnvironmentIn": EnvironmentIn,
    "EnvironmentOut": EnvironmentOut,
    "EnvironmentSettingsOut": EnvironmentSettingsOut,
    "EventExampleIn": EventExampleIn,
    "EventIn": EventIn,
    "EventOut": EventOut,
    "EventStreamOut": EventStreamOut,
    "EventTypeExampleOut": EventTypeExampleOut,
    "EventTypeFromOpenApi": EventTypeFromOpenApi,
    "EventTypeImportOpenApiIn": EventTypeImportOpenApiIn,
    "EventTypeImportOpenApiOut": EventTypeImportOpenApiOut,
    "EventTypeImportOpenApiOutData": EventTypeImportOpenApiOutData,
    "EventTypeIn": EventTypeIn,
    "EventTypeOut": EventTypeOut,
    "EventTypePatch": EventTypePatch,
    "EventTypeSchemaIn": EventTypeSchemaIn,
    "EventTypeUpdate": EventTypeUpdate,
    "ExportEventTypeOut": ExportEventTypeOut,
    "FontSizeConfig": FontSizeConfig,
    "GenerateIn": GenerateIn,
    "GenerateOut": GenerateOut,
    "GoogleCloudStorageConfig": GoogleCloudStorageConfig,
    "HTTPValidationError": HTTPValidationError,
    "HttpErrorOut": HttpErrorOut,
    "HubspotOauthConfigIn": HubspotOauthConfigIn,
    "InboundPathParams": InboundPathParams,
    "IncomingWebhookPayloadOut": IncomingWebhookPayloadOut,
    "IntegrationIn": IntegrationIn,
    "IntegrationKeyOut": IntegrationKeyOut,
    "IntegrationOut": IntegrationOut,
    "IntegrationUpdate": IntegrationUpdate,
    "ListResponseApplicationOut": ListResponseApplicationOut,
    "ListResponseApplicationStats": ListResponseApplicationStats,
    "ListResponseBackgroundTaskOut": ListResponseBackgroundTaskOut,
    "ListResponseEndpointMessageOut": ListResponseEndpointMessageOut,
    "ListResponseEndpointOut": ListResponseEndpointOut,
    "ListResponseEventTypeOut": ListResponseEventTypeOut,
    "ListResponseIntegrationOut": ListResponseIntegrationOut,
    "ListResponseMessageAttemptEndpointOut": ListResponseMessageAttemptEndpointOut,
    "ListResponseMessageAttemptOut": ListResponseMessageAttemptOut,
    "ListResponseMessageEndpointOut": ListResponseMessageEndpointOut,
    "ListResponseMessageOut": ListResponseMessageOut,
    "ListResponseSinkOut": ListResponseSinkOut,
    "ListResponseStreamOut": ListResponseStreamOut,
    "ListResponseStreamSinkOut": ListResponseStreamSinkOut,
    "ListResponseTemplateOut": ListResponseTemplateOut,
    "MessageAttemptEndpointOut": MessageAttemptEndpointOut,
    "MessageAttemptExhaustedEvent": MessageAttemptExhaustedEvent,
    "MessageAttemptExhaustedEventData": MessageAttemptExhaustedEventData,
    "MessageAttemptFailedData": MessageAttemptFailedData,
    "MessageAttemptFailingEvent": MessageAttemptFailingEvent,
    "MessageAttemptFailingEventData": MessageAttemptFailingEventData,
    "MessageAttemptHeadersOut": MessageAttemptHeadersOut,
    "MessageAttemptOut": MessageAttemptOut,
    "MessageAttemptRecoveredEvent": MessageAttemptRecoveredEvent,
    "MessageAttemptRecoveredEventData": MessageAttemptRecoveredEventData,
    "MessageBroadcastIn": MessageBroadcastIn,
    "MessageBroadcastOut": MessageBroadcastOut,
    "MessageEndpointOut": MessageEndpointOut,
    "MessageEventsOut": MessageEventsOut,
    "MessageIn": MessageIn,
    "MessageOut": MessageOut,
    "MessageRawPayloadOut": MessageRawPayloadOut,
    "MessageSubscriberAuthTokenOut": MessageSubscriberAuthTokenOut,
    "OAuthPayloadIn": OAuthPayloadIn,
    "OAuthPayloadOut": OAuthPayloadOut,
    "OneTimeTokenIn": OneTimeTokenIn,
    "OneTimeTokenOut": OneTimeTokenOut,
    "RecoverIn": RecoverIn,
    "RecoverOut": RecoverOut,
    "RedshiftConfig": RedshiftConfig,
    "ReplayIn": ReplayIn,
    "ReplayOut": ReplayOut,
    "RetryScheduleInOut": RetryScheduleInOut,
    "RotatedUrlOut": RotatedUrlOut,
    "S3Config": S3Config,
    "SettingsIn": SettingsIn,
    "SettingsOut": SettingsOut,
    "SinkHttpConfig": SinkHttpConfig,
    "SinkIn": SinkIn,
    "SinkInOneOf": SinkInOneOf,
    "SinkInOneOf1": SinkInOneOf1,
    "SinkInOneOf2": SinkInOneOf2,
    "SinkInOneOf3": SinkInOneOf3,
    "SinkOtelV1Config": SinkOtelV1Config,
    "SinkOut": SinkOut,
    "SinkTransformIn": SinkTransformIn,
    "SinkTransformationOut": SinkTransformationOut,
    "SnowflakeConfig": SnowflakeConfig,
    "StreamIn": StreamIn,
    "StreamOut": StreamOut,
    "StreamPatch": StreamPatch,
    "StreamSinkIn": StreamSinkIn,
    "StreamSinkInOneOf": StreamSinkInOneOf,
    "StreamSinkInOneOf1": StreamSinkInOneOf1,
    "StreamSinkInOneOf2": StreamSinkInOneOf2,
    "StreamSinkInOneOf3": StreamSinkInOneOf3,
    "StreamSinkInOneOf4": StreamSinkInOneOf4,
    "StreamSinkInOneOf5": StreamSinkInOneOf5,
    "StreamSinkInOneOf6": StreamSinkInOneOf6,
    "StreamSinkOut": StreamSinkOut,
    "StreamSinkPatch": StreamSinkPatch,
    "TemplateIn": TemplateIn,
    "TemplateOut": TemplateOut,
    "TemplatePatch": TemplatePatch,
    "TemplateUpdate": TemplateUpdate,
    "TransformationSimulateIn": TransformationSimulateIn,
    "TransformationSimulateOut": TransformationSimulateOut,
    "ValidationError": ValidationError,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string, format: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        } else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth()+1
                month = month < 10 ? "0" + month.toString() : month.toString()
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();

                return data.getFullYear() + "-" + month + "-" + day;
            } else {
                return data.toISOString();
            }
        } else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            
            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string, format: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap.has(type)) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }


    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    public static normalizeMediaType(mediaType: string | undefined): string | undefined {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }

    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    public static getPreferredMediaType(mediaTypes: Array<string>): string {
        /** According to OAS 3 we should default to json */
        if (!mediaTypes) {
            return "application/json";
        }

        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        let selectedMediaType: string | undefined = undefined;
        let selectedRank: number = -Infinity;
        for (const mediaType of normalMediaTypes) {
            if (supportedMediaTypes[mediaType!] > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supportedMediaTypes[mediaType!];
            }
        }

        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }

        return selectedMediaType!;
    }

    /**
     * Convert data to a string according the given media type
     */
    public static stringify(data: any, mediaType: string): string {
        if (mediaType === "application/json") {
            return JSON.stringify(data);
        }

        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }

    /**
     * Parse data from a string according to the given media type
     */
    public static parse(rawData: string, mediaType: string | undefined) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }

        if (mediaType === "application/json") {
            return JSON.parse(rawData);
        }

        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
